(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{527:function(v,t,_){"use strict";_.r(t);var r=_(3),s=Object(r.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"dubbo"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo"}},[v._v("#")]),v._v(" Dubbo")]),v._v(" "),_("h2",{attrs:{id:"一、分布式基础理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、分布式基础理论"}},[v._v("#")]),v._v(" 一、分布式基础理论")]),v._v(" "),_("hr"),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("什么是分布式系统")])]),v._v(" "),_("p",[v._v("《分布式系统原理与范型》定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”分布式系统（distributed system）是建立在网络之上的软件系统。随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需"),_("em",[v._v("一个治理系统")]),v._v("确保架构有条不紊的演进。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("发展演变")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D1.jpg",alt:"D1"}})]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("单一应用架构")])]),v._v(" "),_("p",[v._v("当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用\n于简化增删改查工作量的数据访问框架(ORM)是关键。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D2.jpg",alt:"D2"}})]),v._v(" "),_("p",[v._v("适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。\n缺点：1、性能扩展比较难\n2、协同开发问题\n3、不利于升级维护")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("垂直应用架构")])]),v._v(" "),_("p",[v._v("当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，\n以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D3.jpg",alt:"D3"}})]),v._v(" "),_("p",[v._v("通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能\n扩展也更方便，更有针对性。\n缺点： 公用模块无法重复利用，开发性的浪费")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("分布式服务架构")])]),v._v(" "),_("p",[v._v("当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D4.jpg",alt:"D4"}})])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("流动计算架构")])]),v._v(" "),_("p",[v._v("当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于"),_("strong",[v._v("提高机器利用率的资源调度和治理中心(SOA)是关键")]),v._v("。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D5.jpg",alt:"D5"}})])])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("什么是RPC")])]),v._v(" "),_("p",[v._v("RPC全称(Remote Procedure Call)远程过程调⽤")]),v._v(" "),_("p",[v._v("过程指的是某个代码⽚段的执⾏,远程调⽤则意味着我们可以在其他进程,甚⾄其他机器上去调⽤这段代码,当然也能获取到其执⾏后的返回值,按照这个定义,我")]),v._v(" "),_("p",[v._v("们请求某个http地址得到相应数据其实也算⼀次RPC,但是这样的⽅式太过麻烦,(数据要先打包成http请求格式,在调⽤相关的请求库,拿到的结果也是⽂本格式的")]),v._v(" "),_("p",[v._v("需要在进⾏转换),执⾏效率,和开发效率相⽐RPC则低⼀些;")]),v._v(" "),_("p",[v._v("我们需要⼀种更简单的⽅式来完成分布式开发中的RPC环节,这也是Dubbo的核⼼所在,有多简单呢? 调⽤远程服务器上的某个服务时就像是调⽤本地的某个⽅")]),v._v(" "),_("p",[v._v("法⼀样简单,就像下⾯这样")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D10.jpg",alt:"D10"}})])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("RPC的实现原理")])]),v._v(" "),_("p",[v._v("毫⽆以为底层肯定是要通过socket来进⾏⽹络通讯的,但是如何能够直接调⽤另⼀个机器上的⽅法呢?")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D6.jpg",alt:"D6"}})]),v._v(" "),_("p",[v._v("服务消费⽅（client）调⽤以本地调⽤⽅式调⽤服务；")]),v._v(" "),_("p",[v._v("2）client stub接收到调⽤后负责将⽅法、参数等组装成能够进⾏⽹络传输的消息体；")]),v._v(" "),_("p",[v._v("3）client stub找到服务地址，并将消息发送到服务端；")]),v._v(" "),_("p",[v._v("4）server stub收到消息后进⾏解码；")]),v._v(" "),_("p",[v._v("5）server stub根据解码结果调⽤本地的服务；")]),v._v(" "),_("p",[v._v("6）本地服务执⾏并将结果返回给server stub；")]),v._v(" "),_("p",[v._v("7）server stub将返回结果打包成消息并发送⾄消费⽅；")]),v._v(" "),_("p",[v._v("8）client stub接收到消息，并进⾏解码；")]),v._v(" "),_("p",[v._v("9）服务消费⽅得到最终结果。")]),v._v(" "),_("p",[v._v("当然传递的参数或返回值是某个Java对象时则还需要对其进⾏序列化与反序列化")]),v._v(" "),_("p",[v._v("RPC两个核心模块：通讯，序列化。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D7.jpg",alt:"D7"}})])])]),v._v(" "),_("h2",{attrs:{id:"二、dubbo是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、dubbo是什么"}},[v._v("#")]),v._v(" 二、Dubbo是什么")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("​\tDubbo是⼀款⾼性能、轻量级的开源Java RPC框架，它提供了三⼤核⼼能⼒：⾯向接⼝的远程⽅法调⽤，智能容错和负载均衡，以及服务⾃动注册和发现。")]),v._v(" "),_("h2",{attrs:{id:"三、dubbo的技术架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、dubbo的技术架构"}},[v._v("#")]),v._v(" 三、Dubbo的技术架构")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("​\t我们知道为什么在我们的系统中需要 Dubbo 这项技术了，下面，我们接着了解下 Dubbo 的架构。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://gitee.com/ichensw/drawing-bed/raw/master/image/D9.jpg",alt:"D9"}})]),v._v(" "),_("p",[v._v("看到图之后，可能你对上面的几个概念还是一脸懵逼，无从下手，下面，带你看看这几个角色到底是什么意思？")]),v._v(" "),_("p",[_("strong",[v._v("节点角色说明")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("节点")]),v._v(" "),_("th",[v._v("角色说明")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Provider")]),v._v(" "),_("td",[v._v("暴露服务的服务提供方")])]),v._v(" "),_("tr",[_("td",[v._v("Consumer")]),v._v(" "),_("td",[v._v("调用远程服务的服务消费方")])]),v._v(" "),_("tr",[_("td",[v._v("Registry")]),v._v(" "),_("td",[v._v("服务注册与发现的注册中心")])]),v._v(" "),_("tr",[_("td",[v._v("Monitor")]),v._v(" "),_("td",[v._v("统计服务的调用次数和调用时间的监控中心")])]),v._v(" "),_("tr",[_("td",[v._v("Container")]),v._v(" "),_("td",[v._v("服务运行容器")])])])]),v._v(" "),_("p",[v._v("看了这几个概念后似乎发现，其实 Dubbo 的架构也是很简单的（其实现细节是复杂的），为什么这么说呢，有没有发现，其实很像"),_("strong",[v._v("生产者-消费者模型")]),v._v("。只是在这")]),v._v(" "),_("p",[v._v("种模型上，加上了"),_("strong",[v._v("注册中心和监控中心")]),v._v("，用于管理提供方提供的"),_("strong",[v._v("url")]),v._v("，以及管理整个过程。")]),v._v(" "),_("p",[v._v("那么，整个发布-订阅的过程就非常的简单了。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("启动容器，加载，"),_("strong",[v._v("运行服务提供者")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("服务提供者在启动时，在注册中心"),_("strong",[v._v("发布注册")]),v._v("自己提供的"),_("strong",[v._v("服务")]),v._v("。")])]),v._v(" "),_("li",[_("p",[v._v("服务消费者在启动时，在注册中心"),_("strong",[v._v("订阅")]),v._v("自己所需的"),_("strong",[v._v("服务")]),v._v("。")])])]),v._v(" "),_("p",[v._v("如果考虑"),_("strong",[v._v("失败或变更")]),v._v("的情况，就需要考虑下面的过程。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。")])]),v._v(" "),_("li",[_("p",[v._v("服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。")])]),v._v(" "),_("li",[_("p",[v._v("服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。")])])]),v._v(" "),_("h2",{attrs:{id:"四、为什么需要dubbo"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、为什么需要dubbo"}},[v._v("#")]),v._v(" 四、为什么需要Dubbo")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("简单的说,Dubbo不仅仅是实现了RPC,同时提供了整套分布式服务的管理⽅案; 包括")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("服务注册与发现")])]),v._v(" "),_("li",[_("p",[v._v("负载均衡")])]),v._v(" "),_("li",[_("p",[v._v("流量调度")])]),v._v(" "),_("li",[_("p",[v._v("提供可视化的服务治理⼯具,和运维⼯具")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);