(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{523:function(s,a,n){"use strict";n.r(a);var t=n(3),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"linux三剑客grep、awk、sed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#linux三剑客grep、awk、sed"}},[s._v("#")]),s._v(" Linux三剑客grep、awk、sed")]),s._v(" "),n("p",[s._v("#1.grep 更适合单纯的查找或匹配文本")]),s._v(" "),n("p",[s._v("#2. sed 更适合编辑文本")]),s._v(" "),n("p",[s._v("#3. awk 更适合格式化文本，对文本进行较复杂格式处理")]),s._v(" "),n("h3",{attrs:{id:"一、-grep"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、-grep"}},[s._v("#")]),s._v(" 一、 grep")]),s._v(" "),n("p",[n("strong",[s._v("1.作用")])]),s._v(" "),n("p",[s._v("Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。")]),s._v(" "),n("p",[s._v("grep家族包括grep、egrep和fgrep。egrep和fgrep的命令只跟grep有很小不同。egrep是grep的扩展，支持更多的re元字符， fgrep就是fixed grep或fast grep，它们把所有的字母都看作单词，也就是说，正则表达式中的元字符表示回其自身的字面意义，不再特殊。linux使用GNU版本的grep。它功能更强，可以通过-G、-E、-F命令行选项来使用egrep和fgrep的功能。")]),s._v(" "),n("p",[n("strong",[s._v("2.格式")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("grep [options]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("3.主要参数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("grep --help\n\n[options]主要参数：\n-c：只输出匹配行的计数。\n-i：不区分大小写。\n-h：查询多文件时不显示文件名。\n-l：查询多文件时只输出包含匹配字符的文件名。\n-n：显示匹配行及 行号。\n-s：不显示不存在或无匹配文本的错误信息。\n-v：显示不包含匹配文本的所有行。\n--color=auto ：可以将找到的关键词部分加上颜色的显示。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("pattern正则表达式主要参数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\\： 忽略正则表达式中特殊字符的原有含义。\n^：匹配正则表达式的开始行。\n$: 匹配正则表达式的结束行。\n\\<：从匹配正则表达 式的行开始。\n\\>：到匹配正则表达式的行结束。\n[ ]：单个字符，如[A]即A符合要求 。\n[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。\n.：所有的单个字符。\n*：有字符，长度可以为0。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("4.grep命令使用简单实例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ grep ‘test’ d*\n显示所有以d开头的文件中包含 test的行。\n\n$ grep ‘test’ aa bb cc\n显示在aa，bb，cc文件中匹配test的行。\n\n$ grep ‘[a-z]\\{5\\}’ aa\n显示所有包含每个字符串至少有5个连续小写字符的字符串的行。\n\n$ grep ‘w\\(es\\)t.*\\1′ aa\n如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符(.*)，这些字符后面紧跟着 另外一个es(\\1)，找到就显示该行。如果用egrep或grep -E，就不用”\\”号进行转义，直接写成’w(es)t.*\\1′就可以了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("5.grep命令使用复杂实例")]),s._v(" "),n("p",[s._v("明确要求搜索子目录：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("grep -r\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("或忽略子目录：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("grep -d skip\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果有很多输出时，您可以通过管道将其转到’less’上阅读：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ grep magic /usr/src/Linux/Documentation/* | less\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这样，您就可以更方便地阅读。")]),s._v(" "),n("p",[s._v("有一点要注意，您必需提供一个文件过滤方式(搜索全部文件的话用 *)。如果您忘了，’grep’会一直等着，直到该程序被中断。如果您遇到了这样的情况，按 ，然后再试。")]),s._v(" "),n("p",[s._v("下面还有一些有意思的命令行参数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('grep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，\n\ngrep -l pattern files ：只列出匹配的文件名，\n\ngrep -L pattern files ：列出不匹配的文件名，\n\ngrep -w pattern files ：只匹配整个单词，而不是字符串的一部分(如匹配’magic’，而不是’magical’)，\n\ngrep -C number pattern files ：匹配的上下文分别显示[number]行，\n\ngrep pattern1 | pattern2 files ：显示匹配 pattern1 或 pattern2 的行，\n例如：grep "abc\\|xyz" testfile    表示过滤包含abc或xyz的行\n\ngrep pattern1 files | grep pattern2 ：显示既匹配 pattern1 又匹配 pattern2 的行。\n\ngrep -n pattern files  即可显示行号信息\n\ngrep -c pattern files  即可查找总行数\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("这里还有些用于搜索的特殊符号：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\\< 和 \\> 分别标注单词的开始与结尾。\n例如：\ngrep man * 会匹配 ‘Batman’、’manic’、’man’等，\ngrep ‘\\<man’ * 匹配’manic’和’man’，但不是’Batman’，\ngrep ‘\\<man\\>’ 只匹配’man’，而不是’Batman’或’manic’等其他的字符串。\n‘^’：指匹配的字符串在行首，\n‘$’：指匹配的字符串在行尾，\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"二、-sed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、-sed"}},[s._v("#")]),s._v(" 二、 sed")]),s._v(" "),n("p",[s._v("Linux sed 命令是利用脚本来处理文本文件。")]),s._v(" "),n("p",[s._v("sed 可依照脚本的指令来处理、编辑文本文件。")]),s._v(" "),n("p",[s._v("Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。")]),s._v(" "),n("p",[n("strong",[s._v("参数说明：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("-e<script>或--expression=<script> 以选项中指定的script来处理输入的文本文件。\n-f<script文件>或--file=<script文件> 以选项中指定的script文件来处理输入的文本文件。\n-h或--help 显示帮助。\n-n或--quiet或--silent 仅显示script处理后的结果。\n-V或--version 显示版本信息。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("动作说明：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～\nc ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！\nd ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；\ni ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；\np ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～\ns ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("实例")])]),s._v(" "),n("p",[n("strong",[s._v("注意：sed -e是修改输出终端，sed -i才是在源文件修改！！！")])]),s._v(" "),n("p",[n("strong",[s._v("实操案例：")])]),s._v(" "),n("p",[n("strong",[s._v("#1.sed -e 与sed -i")])]),s._v(" "),n("p",[s._v("在testfile文件的第四行后添加一行，并将结果输出到标准输出，在命令行提示符下输入如下命令：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("sed -e 4a\\newLine testfile \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("首先查看testfile中的内容如下： cat testfile #查看testfile 中的内容")]),s._v(" "),n("p",[s._v("自己vim testfile文件将下列内容输入做测试用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("HELLO LINUX!  Linux is a free unix-type opterating system.  \nThis is a linux testfile! \nLinux test \nAre you ok\n\nYou is pig\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("使用sed命令后，输出结果如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("nl /etc/passwd | sed '2i drink tea' \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("将第2-5行的内容取代成为No 2-5 number:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("nl /etc/passwd | sed '2,5c No 2-5 number' \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("#2. sed -s  替换")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("把is 换成are：\nsed 's/is/are/g' testfile\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("#3.sed -d  删除")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$删除头三行:\nsed '1,3d' testfile\n$删除包含pig的行:\nsed '\\%pig%d' testfile\n$删除所有空白行\nsed '/^$/d' testfile\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("#sed -n")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("显示5-10行:\nsed -n '5,10p'  testfile\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"三、-awk"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、-awk"}},[s._v("#")]),s._v(" 三、 awk")]),s._v(" "),n("p",[s._v("​\t"),n("strong",[s._v("这里我们介绍一下"),n("strong",[n("strong",[s._v("awk")])]),s._v("实用用法")]),s._v("**，**"),n("strong",[s._v("更加详细参考下面链接文档")])]),s._v(" "),n("p",[s._v("https://www.cnblogs.com/ginvip/p/6352157.html")]),s._v(" "),n("p",[s._v("​\tAWK是一种处理文本文件的语言，是一个强大的文本分析工具。")]),s._v(" "),n("p",[s._v("之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。")]),s._v(" "),n("p",[s._v("语法")]),s._v(" "),n("p",[n("strong",[s._v("选项参数说明：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("-F fs or --field-separator fs\n指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。\n\n-v var=value or --asign var=value\n赋值一个用户定义变量。\n\n-f scripfile or --file scriptfile\n从脚本文件中读取awk命令。\n\n-mf nnn and -mr nnn\n对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。\n\n-W compact or --compat, -W traditional or --traditional\n在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。\n\n-W copyleft or --copyleft, -W copyright or --copyright\n打印简短的版权信息。\n\n-W help or --help, -W usage or --usage\n打印全部awk选项和每个选项的简短说明。\n\n-W lint or --lint\n打印不能向传统unix平台移植的结构的警告。\n\n-W lint-old or --lint-old\n打印关于不能向传统unix平台移植的结构的警告。\n\n-W posix\n打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符**和**=不能代替^和^=；fflush无效。\n\n-W re-interval or --re-inerval\n允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。\n\n-W source program-text or --source program-text\n使用program-text作为源代码，可与-f命令混用。\n\n-W version or --version\n打印bug报告信息的版本。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("p",[n("strong",[s._v("基本用法")])]),s._v(" "),n("p",[s._v("log.txt文本内容如下：")]),s._v(" "),n("p",[s._v("自己vim log.txt,将下面文件输入做测试。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("2 this is a test3 Are you like awkThis's a test\n10 There are orange,apple,mongo\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("用法一：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("awk '{[pattern] action}' {filenames}   # 行匹配语句 awk '' 只能用单引号\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 每行按空格或TAB分割，输出文本中的1、4项\n $ awk '{print $1,$4}' log.txt\n#从文件中找出长度大于8的行\nawk 'length>8' log.txt\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("用法二：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("awk -F  #-F相当于内置变量FS, 指定分割字符\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 使用\",\"分割\n $  awk -F, '{print $1,$2}'   log.txt\n# 使用多个分隔符.先使用空格分割，然后对分割结果再使用\",\"分割\n $ awk -F '[ ,]'  '{print $1,$2,$5}'   log.txt\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("用法三：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("awk -v  # 设置变量\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#设置变量a,并赋值=1，打印第一列和第一列加变量a的值 \n$ awk -va=1 '{print $1,$1+a}' log.txt\n#设置两个变量a=1和b=2，并赋值打印第一列，第一列+a,第一列+b的值：\n$ awk -va=1 -vb=2 '{print $1,$1+a,$1b}' log.txt\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("用法四：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("awk -f {awk脚本} {文件名}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" $ awk -f cal.awk log.txt\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("运算符")])]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[s._v("运算符")])]),s._v(" "),n("th",[n("strong",[s._v("描述")])])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("= += -= *= /= %= ^= **=")]),s._v(" "),n("td",[s._v("赋值")])]),s._v(" "),n("tr",[n("td",[s._v("?:")]),s._v(" "),n("td",[s._v("C条件表达式")])]),s._v(" "),n("tr",[n("td",[s._v("||")]),s._v(" "),n("td",[s._v("逻辑或")])]),s._v(" "),n("tr",[n("td",[s._v("&&")]),s._v(" "),n("td",[s._v("逻辑与")])]),s._v(" "),n("tr",[n("td",[s._v("~ 和 !~")]),s._v(" "),n("td",[s._v("匹配正则表达式和不匹配正则表达式")])]),s._v(" "),n("tr",[n("td",[s._v("< <= > >= != ==")]),s._v(" "),n("td",[s._v("关系运算符")])]),s._v(" "),n("tr",[n("td",[s._v("空格")]),s._v(" "),n("td",[s._v("连接")])]),s._v(" "),n("tr",[n("td",[s._v("+ -")]),s._v(" "),n("td",[s._v("加，减")])]),s._v(" "),n("tr",[n("td",[s._v("* / %")]),s._v(" "),n("td",[s._v("乘，除与求余")])]),s._v(" "),n("tr",[n("td",[s._v("+ - !")]),s._v(" "),n("td",[s._v("一元加，减和逻辑非")])]),s._v(" "),n("tr",[n("td",[s._v("^ **")]),s._v(" "),n("td",[s._v("求幂")])]),s._v(" "),n("tr",[n("td",[s._v("++ --")]),s._v(" "),n("td",[s._v("增加或减少，作为前缀或后缀")])]),s._v(" "),n("tr",[n("td",[s._v("$")]),s._v(" "),n("td",[s._v("字段引用")])]),s._v(" "),n("tr",[n("td",[s._v("in")]),s._v(" "),n("td",[s._v("数组成员")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("#过滤第一列大于2的行\n$ awk '$1>2' log.txt    \n#过滤第一列等于2的行\n$ awk '$1==2 {print $1,$3}' log.txt  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("内建变量")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("strong",[s._v("变量")])]),s._v(" "),n("th",[n("strong",[s._v("描述")])])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("$n")]),s._v(" "),n("td",[s._v("当前记录的第n个字段，字段间由FS分隔")])]),s._v(" "),n("tr",[n("td",[s._v("$0")]),s._v(" "),n("td",[s._v("完整的输入记录")])]),s._v(" "),n("tr",[n("td",[s._v("ARGC")]),s._v(" "),n("td",[s._v("命令行参数的数目")])]),s._v(" "),n("tr",[n("td",[s._v("ARGIND")]),s._v(" "),n("td",[s._v("命令行中当前文件的位置(从0开始算)")])]),s._v(" "),n("tr",[n("td",[s._v("ARGV")]),s._v(" "),n("td",[s._v("包含命令行参数的数组")])]),s._v(" "),n("tr",[n("td",[s._v("CONVFMT")]),s._v(" "),n("td",[s._v("数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组")])]),s._v(" "),n("tr",[n("td",[s._v("ERRNO")]),s._v(" "),n("td",[s._v("最后一个系统错误的描述")])]),s._v(" "),n("tr",[n("td",[s._v("FIELDWIDTHS")]),s._v(" "),n("td",[s._v("字段宽度列表(用空格键分隔)")])]),s._v(" "),n("tr",[n("td",[s._v("FILENAME")]),s._v(" "),n("td",[s._v("当前文件名")])]),s._v(" "),n("tr",[n("td",[s._v("FNR")]),s._v(" "),n("td",[s._v("各文件分别计数的行号")])]),s._v(" "),n("tr",[n("td",[s._v("FS")]),s._v(" "),n("td",[s._v("字段分隔符(默认是任何空格)")])]),s._v(" "),n("tr",[n("td",[s._v("IGNORECASE")]),s._v(" "),n("td",[s._v("如果为真，则进行忽略大小写的匹配")])]),s._v(" "),n("tr",[n("td",[s._v("NF")]),s._v(" "),n("td",[s._v("一条记录的字段的数目")])]),s._v(" "),n("tr",[n("td",[s._v("NR")]),s._v(" "),n("td",[s._v("已经读出的记录数，就是行号，从1开始")])]),s._v(" "),n("tr",[n("td",[s._v("OFMT")]),s._v(" "),n("td",[s._v("数字的输出格式(默认值是%.6g)")])]),s._v(" "),n("tr",[n("td",[s._v("OFS")]),s._v(" "),n("td",[s._v("输出记录分隔符（输出换行符），输出时用指定的符号代替换行符")])]),s._v(" "),n("tr",[n("td",[s._v("ORS")]),s._v(" "),n("td",[s._v("输出记录分隔符(默认值是一个换行符)")])]),s._v(" "),n("tr",[n("td",[s._v("RLENGTH")]),s._v(" "),n("td",[s._v("由match函数所匹配的字符串的长度")])]),s._v(" "),n("tr",[n("td",[s._v("RS")]),s._v(" "),n("td",[s._v("记录分隔符(默认是一个换行符)")])]),s._v(" "),n("tr",[n("td",[s._v("RSTART")]),s._v(" "),n("td",[s._v("由match函数所匹配的字符串的第一个位置")])]),s._v(" "),n("tr",[n("td",[s._v("SUBSEP")]),s._v(" "),n("td",[s._v("数组下标分隔符(默认值是/034)")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('$ awk \'BEGIN{printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n","FILENAME","ARGC","FNR","FS","NF","NR","OFS","ORS","RS";printf "---------------------------------------------\\n"} {printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}\'  log.txt\nFILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS---------------------------------------------\nlog.txt    2    1         5    1\nlog.txt    2    2         5    2\nlog.txt    2    3         3    3\nlog.txt    2    4         4    4\n$ awk -F\\\' \'BEGIN{printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n","FILENAME","ARGC","FNR","FS","NF","NR","OFS","ORS","RS";printf "---------------------------------------------\\n"} {printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\\n",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}\'  log.txt\nFILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS---------------------------------------------\nlog.txt    2    1    \'    1    1\nlog.txt    2    2    \'    1    2\nlog.txt    2    3    \'    2    3\nlog.txt    2    4    \'    1    4# 输出顺序号 NR, 匹配文本行号\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("strong",[s._v("使用正则，字符串匹配:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 输出第二列包含 \"th\"，并打印第二列与第四列\n$ awk '$2 ~ /th/ {print $2,$4}' log.txt\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);